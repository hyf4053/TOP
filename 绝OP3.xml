<?xml version="1.0"?>
<TriggernometryExport Version="1">
  <ExportedFolder Id="3043a5ec-7b63-400f-8025-b65a31db6444" Name="P3 探测式波动炮" Enabled="true">
    <Folders>
      <Folder Id="3ed3b806-1ba5-432b-b278-c76bc15e6fcc" Name="探测式波动炮" Enabled="true">
        <Folders />
        <Triggers>
          <Trigger Enabled="true" Name="探测式波动炮B" Id="1799c3da-5b1f-41c1-98e1-2a24e0c69463" RegularExpression="(?&lt;timestamp&gt;^.{14}) StartsCasting (?&lt;type&gt;14):(?&lt;sourceId&gt;[^:]*):(?&lt;source&gt;[^:]*):7B6B:(?&lt;ability&gt;(?:[^:]|: )*?):(?&lt;targetId&gt;[^:]*):(?&lt;target&gt;[^:]*):(?&lt;castTime&gt;[^:]*):(?&lt;x&gt;[^:]*):(?&lt;y&gt;[^:]*):(?&lt;z&gt;[^:]*):(?&lt;heading&gt;[^:]*)(?:$|:)">
            <Actions>
              <Action OrderNumber="1" UseTTSTextExpression="波点12点" Enabled="False" ActionType="UseTTS">
                <Condition Enabled="false" Grouping="Or" />
              </Action>
              <Action OrderNumber="2" VariableOp="SetString" VariableName="LR" VariableExpression="B" ActionType="Variable">
                <Condition Enabled="false" Grouping="Or" />
              </Action>
            </Actions>
            <Condition Enabled="false" Grouping="Or" />
          </Trigger>
          <Trigger Enabled="true" Name="探测式波动炮D" Id="c72f094e-aa73-4649-b16d-32d1c2a4223c" RegularExpression="(?&lt;timestamp&gt;^.{14}) StartsCasting (?&lt;type&gt;14):(?&lt;sourceId&gt;[^:]*):(?&lt;source&gt;[^:]*):7B6C:(?&lt;ability&gt;(?:[^:]|: )*?):(?&lt;targetId&gt;[^:]*):(?&lt;target&gt;[^:]*):(?&lt;castTime&gt;[^:]*):(?&lt;x&gt;[^:]*):(?&lt;y&gt;[^:]*):(?&lt;z&gt;[^:]*):(?&lt;heading&gt;[^:]*)(?:$|:)">
            <Actions>
              <Action OrderNumber="1" UseTTSTextExpression="得点12点" Enabled="False" ActionType="UseTTS">
                <Condition Enabled="false" Grouping="Or" />
              </Action>
              <Action OrderNumber="2" VariableOp="SetString" VariableName="LR" VariableExpression="D" ActionType="Variable">
                <Condition Enabled="false" Grouping="Or" />
              </Action>
            </Actions>
            <Condition Enabled="false" Grouping="Or" />
          </Trigger>
        </Triggers>
      </Folder>
      <Folder Id="84f68a94-a9eb-462e-b422-6bcbb5e178c7" Name="点名左右刀" Enabled="true">
        <Folders />
        <Triggers>
          <Trigger Enabled="true" Name="点名左刀" Id="99414be6-cc36-423a-8660-05f08d316ec3" RegularExpression="(?&lt;timestamp&gt;^.{14}) StatusAdd (?&lt;type&gt;1A):D7D:(?&lt;effect&gt;(?:[^:]|: )*?):(?&lt;duration&gt;[^:]*):(?&lt;sourceId&gt;[^:]*):(?&lt;source&gt;[^:]*):(?&lt;targetId&gt;[^:]*):(?&lt;target&gt;[^:]*):(?&lt;count&gt;[^:]*):(?&lt;targetMaxHp&gt;[^:]*):(?&lt;sourceMaxHp&gt;[^:]*)(?:$|:)">
            <Actions>
              <Action OrderNumber="1" UseTTSTextExpression="点名左刀" Enabled="False" ActionType="UseTTS">
                <Condition Enabled="false" Grouping="Or" />
              </Action>
              <Action OrderNumber="2" ListVariableOp="Push" ListVariableName="P3LMarkList" ListVariableExpression="${target}" ActionType="ListVariable">
                <Condition Enabled="false" Grouping="Or" />
              </Action>
              <Action OrderNumber="3" ListVariableOp="Push" ListVariableName="P3MarkList" ListVariableExpression="${target}" ActionType="ListVariable">
                <Condition Enabled="false" Grouping="Or" />
              </Action>
              <Action OrderNumber="4" LogMessageText="OnBuffApply" LogProcess="True" ActionType="LogMessage">
                <Condition Enabled="false" Grouping="Or" />
              </Action>
            </Actions>
            <Condition Enabled="true" Grouping="And">
              <ConditionSingle Enabled="true" ExpressionL="${target}" ExpressionTypeL="String" ExpressionR="${_ffxivplayer}" ExpressionTypeR="String" ConditionType="StringEqualNocase" />
            </Condition>
          </Trigger>
          <Trigger Enabled="true" Name="点名右刀" Id="37b06f77-4b84-41e8-ae83-067882b9017a" RegularExpression="(?&lt;timestamp&gt;^.{14}) StatusAdd (?&lt;type&gt;1A):D7C:(?&lt;effect&gt;(?:[^:]|: )*?):(?&lt;duration&gt;[^:]*):(?&lt;sourceId&gt;[^:]*):(?&lt;source&gt;[^:]*):(?&lt;targetId&gt;[^:]*):(?&lt;target&gt;[^:]*):(?&lt;count&gt;[^:]*):(?&lt;targetMaxHp&gt;[^:]*):(?&lt;sourceMaxHp&gt;[^:]*)(?:$|:)">
            <Actions>
              <Action OrderNumber="1" UseTTSTextExpression="点名右刀" Enabled="False" ActionType="UseTTS">
                <Condition Enabled="true" Grouping="And">
                  <ConditionSingle Enabled="true" ExpressionL="${target}" ExpressionTypeL="String" ExpressionR="${_ffxivplayer}" ExpressionTypeR="String" ConditionType="StringEqualNocase" />
                </Condition>
              </Action>
              <Action OrderNumber="2" ListVariableOp="Push" ListVariableName="P3MarkList" ListVariableExpression="${target}" ActionType="ListVariable">
                <Condition Enabled="false" Grouping="Or" />
              </Action>
              <Action OrderNumber="3" ListVariableOp="Push" ListVariableName="P3RMarkList" ListVariableExpression="${target}" ActionType="ListVariable">
                <Condition Enabled="false" Grouping="Or" />
              </Action>
              <Action OrderNumber="4" LogMessageText="OnBuffApply" LogProcess="True" ActionType="LogMessage">
                <Condition Enabled="false" Grouping="Or" />
              </Action>
            </Actions>
            <Condition Enabled="false" Grouping="Or" />
          </Trigger>
          <Trigger Enabled="true" Name="P3波动炮初始化" Id="76ce7cf1-5876-4b32-ad0b-8b3c43e5b7b9" RegularExpression="">
            <Actions>
              <Action OrderNumber="1" ListVariableName="P3MarkList" ActionType="ListVariable">
                <Condition Enabled="false" Grouping="Or" />
              </Action>
              <Action OrderNumber="2" ListVariableName="P3LMarkList" ActionType="ListVariable">
                <Condition Enabled="false" Grouping="Or" />
              </Action>
              <Action OrderNumber="3" ListVariableName="P3RMarkList" ActionType="ListVariable">
                <Condition Enabled="false" Grouping="Or" />
              </Action>
              <Action OrderNumber="4" VariableName="LR" ActionType="Variable">
                <Condition Enabled="false" Grouping="Or" />
              </Action>
            </Actions>
            <Condition Enabled="false" Grouping="Or" />
          </Trigger>
          <Trigger Enabled="true" Name="点名结束(脚本测试）" Id="2a82a999-f6eb-4ffb-a08a-143124d29517" RegularExpression="OnBuffApply">
            <Actions>
              <Action OrderNumber="1" ExecScriptExpression="//using System.Windows.Forms;&#xD;&#xA;using System.Collections.Generic;&#xD;&#xA;//Written by 咪咪科技 - P3探测式波动炮轮椅&#xD;&#xA;//注意，在Triggernometry中所有的List起始的index为1&#xD;&#xA;&#xD;&#xA;//初始化正常优先级&#xD;&#xA;enum Priority&#xD;&#xA;{&#xD;&#xA;    WAR = 1,&#xD;&#xA;    DRK = 2,&#xD;&#xA;    PLD = 3,&#xD;&#xA;    GNB = 4,&#xD;&#xA;    WHM = 5,&#xD;&#xA;    AST = 6,&#xD;&#xA;    SGE = 7,&#xD;&#xA;    SCH = 8,&#xD;&#xA;    SAM = 9,&#xD;&#xA;    MNK = 10,&#xD;&#xA;    RPR = 11,&#xD;&#xA;    NIN = 12,&#xD;&#xA;    DRG = 13,&#xD;&#xA;    BRD = 14,&#xD;&#xA;    MCH = 15,&#xD;&#xA;    DNC = 16,&#xD;&#xA;    BLM = 17,&#xD;&#xA;    SMN = 18,&#xD;&#xA;    RDM = 19&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;//初始化P3优先级,以B为顺位，D为逆位&#xD;&#xA;//顺位优先级时1最大，逆位优先级时1最小&#xD;&#xA;enum Phase3PriorityN&#xD;&#xA;{&#xD;&#xA;    SCH = 1,&#xD;&#xA;    SGE = 2,&#xD;&#xA;    WHM = 3,&#xD;&#xA;    AST = 4,&#xD;&#xA;    SAM = 15,&#xD;&#xA;    MNK = 14,&#xD;&#xA;    RPR = 13,&#xD;&#xA;    NIN = 12,&#xD;&#xA;    DRG = 11,&#xD;&#xA;    BRD = 10,&#xD;&#xA;    MCH = 9,&#xD;&#xA;    DNC = 8,&#xD;&#xA;    BLM = 7,&#xD;&#xA;    SMN = 6,&#xD;&#xA;    RDM = 5,&#xD;&#xA;    WAR = 19,&#xD;&#xA;    DRK = 18,&#xD;&#xA;    PLD = 17,&#xD;&#xA;    GNB = 16,&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;enum Phase3PriorityR&#xD;&#xA;{&#xD;&#xA;    SCH = 19,&#xD;&#xA;    SGE = 18,&#xD;&#xA;    WHM = 17,&#xD;&#xA;    AST = 16,&#xD;&#xA;    SAM = 5,&#xD;&#xA;    MNK = 6,&#xD;&#xA;    RPR = 7,&#xD;&#xA;    NIN = 8,&#xD;&#xA;    DRG = 9,&#xD;&#xA;    BRD = 10,&#xD;&#xA;    MCH = 11,&#xD;&#xA;    DNC = 8,&#xD;&#xA;    BLM = 7,&#xD;&#xA;    SMN = 6,&#xD;&#xA;    RDM = 5,&#xD;&#xA;    WAR = 1,&#xD;&#xA;    DRK = 2,&#xD;&#xA;    PLD = 3,&#xD;&#xA;    GNB = 4,&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;//加载变量&#xD;&#xA;//P3 被标记的人的名字list&#xD;&#xA;Triggernometry.Variables.VariableList P3MarkList = TriggernometryHelpers.GetListVariable(false,&quot;P3MarkList&quot;);&#xD;&#xA;//左点名list&#xD;&#xA;Triggernometry.Variables.VariableList P3LMarkList = TriggernometryHelpers.GetListVariable(false,&quot;P3LMarkList&quot;);&#xD;&#xA;//右点名list&#xD;&#xA;Triggernometry.Variables.VariableList P3RMarkList = TriggernometryHelpers.GetListVariable(false,&quot;P3RMarkList&quot;);&#xD;&#xA;//欧米茄波动炮BorD&#xD;&#xA;var LR = TriggernometryHelpers.GetScalarVariable(false,&quot;LR&quot;);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;//游戏内小队顺位数据获取，这两组数据是一一对应的&#xD;&#xA;//第一行是小队队员名称&#xD;&#xA;Triggernometry.Variables.VariableList PartyIDList = TriggernometryHelpers.GetListVariable(false,&quot;PartyIDList&quot;);&#xD;&#xA;//第二行是当前小队顺序的职业顺序&#xD;&#xA;Triggernometry.Variables.VariableList PartyJobList = TriggernometryHelpers.GetListVariable(false,&quot;PartyJobList&quot;);&#xD;&#xA;&#xD;&#xA;//TODO:这里的1在最后要改成3&#xD;&#xA;if(P3MarkList!=null &amp;&amp; P3MarkList.Size() == 3){&#xD;&#xA;    // &amp;&amp; P3MarkList.Size()&#xD;&#xA;     //TriggernometryHelpers.PlayTTS(P3MarkList.ToString());&#xD;&#xA;     //int x = (int)Phase3Priority.SCH;&#xD;&#xA;     //Phase3Priority p = (Phase3Priority)1;&#xD;&#xA;     //TriggernometryHelpers.PlayTTS(p.ToString());&#xD;&#xA;     //MessageBox.Show(((int)Phase3Priority.SCH).ToString());&#xD;&#xA;    //TriggernometryHelpers.PlayTTS(P3MarkList.Peek(1).ToString());&#xD;&#xA;    //TriggernometryHelpers.PlayTTS(P3MarkList.Size().ToString());&#xD;&#xA;    //TriggernometryHelpers.PlayTTS(LR);&#xD;&#xA;    //TriggernometryHelpers.PlayTTS(P3MarkList.Peek(i).ToString());&#xD;&#xA;&#xD;&#xA;    //排序结果, 这个结果会按照优先级从最高到最低进行排序，里面的int指的是实际玩家在gamepartylist里面的顺序&#xD;&#xA;    int[] order = new int[3];&#xD;&#xA;&#xD;&#xA;    //对点名的list进行排序&#xD;&#xA;    for (int i = 1; i &lt; 3+1; i++)&#xD;&#xA;    {&#xD;&#xA;        //玩家名字&#xD;&#xA;        string playerName = P3MarkList.Peek(i).ToString();&#xD;&#xA;        //玩家在list中的位置&#xD;&#xA;        int index = PartyIDList.IndexOf(playerName);&#xD;&#xA;        //保存至待排序的数组&#xD;&#xA;        order[i-1] = index;&#xD;&#xA;        //TriggernometryHelpers.PlayTTS(index.ToString());&#xD;&#xA;    }&#xD;&#xA;    //获取对应的玩家的职业&#xD;&#xA;    string[] jobOrder = new string[3];&#xD;&#xA;    jobOrder[0] = PartyJobList.Peek(order[0]).ToString();&#xD;&#xA;    jobOrder[1] = PartyJobList.Peek(order[1]).ToString();&#xD;&#xA;    jobOrder[2] = PartyJobList.Peek(order[2]).ToString();&#xD;&#xA;    //打B边，使用顺序优先级&#xD;&#xA;    if(LR == &quot;B&quot;)&#xD;&#xA;    {&#xD;&#xA;        //将DNC转换成对应的优先级&#xD;&#xA;        Phase3PriorityN EJob0, EJob1, EJob2 =  new Phase3PriorityN();&#xD;&#xA;        Phase3PriorityN.TryParse(jobOrder[0],out EJob0);&#xD;&#xA;        Phase3PriorityN.TryParse(jobOrder[1],out EJob1);&#xD;&#xA;        Phase3PriorityN.TryParse(jobOrder[2],out EJob2);&#xD;&#xA;&#xD;&#xA;        // TriggernometryHelpers.PlayTTS(((int)EJob0).ToString());&#xD;&#xA;        // TriggernometryHelpers.PlayTTS(((int)EJob1).ToString());&#xD;&#xA;        // TriggernometryHelpers.PlayTTS(((int)EJob2).ToString());&#xD;&#xA;        //TriggernometryHelpers.PlayTTS(&quot;B&quot;);&#xD;&#xA;&#xD;&#xA;        //原始DNC的index&#xD;&#xA;        Dictionary&lt;string,int&gt; Original = new Dictionary&lt;string,int&gt;();&#xD;&#xA;        //根据优先级排序的结果&#xD;&#xA;        SortedDictionary&lt;int,string&gt; DicSort = new SortedDictionary&lt;int,string&gt;();&#xD;&#xA;        Original.Add(jobOrder[0],0);&#xD;&#xA;        Original.Add(jobOrder[1],1);&#xD;&#xA;        Original.Add(jobOrder[2],2);&#xD;&#xA;        DicSort.Add((int)EJob0,jobOrder[0]);&#xD;&#xA;        DicSort.Add((int)EJob1,jobOrder[1]);&#xD;&#xA;        DicSort.Add((int)EJob2,jobOrder[2]);&#xD;&#xA;&#xD;&#xA;        int counter = 0;&#xD;&#xA;        foreach (var item in DicSort)&#xD;&#xA;        {&#xD;&#xA;            if(TriggernometryHelpers.EvaluateStringExpression(&quot;${_ffxivplayer}&quot;)==P3MarkList.Peek(Original[item.Value]+1).ToString())&#xD;&#xA;            {&#xD;&#xA;                if(P3LMarkList.IndexOf(P3MarkList.Peek(Original[item.Value]+1).ToString())!=0)&#xD;&#xA;                {&#xD;&#xA;                    if(counter==0)&#xD;&#xA;                    {&#xD;&#xA;                        TriggernometryHelpers.PlayTTS(&quot;左刀去1点朝向Boy&quot;);&#xD;&#xA;                    }&#xD;&#xA;                    else if(counter==1)&#xD;&#xA;                    {&#xD;&#xA;                        TriggernometryHelpers.PlayTTS(&quot;左刀去2点朝向Dog&quot;);&#xD;&#xA;                    }&#xD;&#xA;                    else if(counter==2)&#xD;&#xA;                    {&#xD;&#xA;                        TriggernometryHelpers.PlayTTS(&quot;左刀去3点朝向A&quot;);&#xD;&#xA;                    }&#xD;&#xA;                    &#xD;&#xA;                }&#xD;&#xA;                else if(P3RMarkList.IndexOf(P3MarkList.Peek(Original[item.Value]+1).ToString())!=0)&#xD;&#xA;                {&#xD;&#xA;                    if(counter==0)&#xD;&#xA;                    {&#xD;&#xA;                        TriggernometryHelpers.PlayTTS(&quot;右刀去1点朝向Dog&quot;);&#xD;&#xA;                    }&#xD;&#xA;                    else if(counter==1)&#xD;&#xA;                    {&#xD;&#xA;                        TriggernometryHelpers.PlayTTS(&quot;右刀去2点朝向Boy&quot;);&#xD;&#xA;                    }&#xD;&#xA;                    else if(counter==2)&#xD;&#xA;                    {&#xD;&#xA;                        TriggernometryHelpers.PlayTTS(&quot;右刀去3点朝向C&quot;);&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;            counter++;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;    }&#xD;&#xA;    else if(LR == &quot;D&quot;)&#xD;&#xA;    {&#xD;&#xA;         //TriggernometryHelpers.PlayTTS(TriggernometryHelpers.EvaluateStringExpression(&quot;${_ffxivplayer}&quot;));&#xD;&#xA;         //将DNC转换成对应的优先级&#xD;&#xA;        Phase3PriorityR EJob0, EJob1, EJob2 =  new Phase3PriorityR();&#xD;&#xA;        Phase3PriorityR.TryParse(jobOrder[0],out EJob0);&#xD;&#xA;        Phase3PriorityR.TryParse(jobOrder[1],out EJob1);&#xD;&#xA;        Phase3PriorityR.TryParse(jobOrder[2],out EJob2);&#xD;&#xA;&#xD;&#xA;        //TriggernometryHelpers.PlayTTS(&quot;D&quot;);&#xD;&#xA;&#xD;&#xA;        //原始DNC的index&#xD;&#xA;        Dictionary&lt;string,int&gt; Original = new Dictionary&lt;string,int&gt;();&#xD;&#xA;        //根据优先级排序的结果&#xD;&#xA;        SortedDictionary&lt;int,string&gt; DicSort = new SortedDictionary&lt;int,string&gt;();&#xD;&#xA;        Original.Add(jobOrder[0],0);&#xD;&#xA;        Original.Add(jobOrder[1],1);&#xD;&#xA;        Original.Add(jobOrder[2],2);&#xD;&#xA;        DicSort.Add((int)EJob0,jobOrder[0]);&#xD;&#xA;        DicSort.Add((int)EJob1,jobOrder[1]);&#xD;&#xA;        DicSort.Add((int)EJob2,jobOrder[2]);&#xD;&#xA;&#xD;&#xA;        int counter = 0;&#xD;&#xA;        foreach (var item in DicSort)&#xD;&#xA;        {&#xD;&#xA;           &#xD;&#xA;            if(TriggernometryHelpers.EvaluateStringExpression(&quot;${_ffxivplayer}&quot;)==P3MarkList.Peek(Original[item.Value]+1).ToString())&#xD;&#xA;            {&#xD;&#xA;                if(P3LMarkList.IndexOf(P3MarkList.Peek(Original[item.Value]+1).ToString())!=0)&#xD;&#xA;                {&#xD;&#xA;                    if(counter==0)&#xD;&#xA;                    {&#xD;&#xA;                        TriggernometryHelpers.PlayTTS(&quot;左刀去3点朝向Dog&quot;);&#xD;&#xA;                    }&#xD;&#xA;                    else if(counter==1)&#xD;&#xA;                    {&#xD;&#xA;                        TriggernometryHelpers.PlayTTS(&quot;左刀去4点朝向Boy&quot;);&#xD;&#xA;                    }&#xD;&#xA;                    else if(counter==2)&#xD;&#xA;                    {&#xD;&#xA;                        TriggernometryHelpers.PlayTTS(&quot;左刀去1点朝向C&quot;);&#xD;&#xA;                    }&#xD;&#xA;                    &#xD;&#xA;                }&#xD;&#xA;                else if(P3RMarkList.IndexOf(P3MarkList.Peek(Original[item.Value]+1).ToString())!=0)&#xD;&#xA;                {&#xD;&#xA;                    if(counter==0)&#xD;&#xA;                    {&#xD;&#xA;                        TriggernometryHelpers.PlayTTS(&quot;右刀去3点朝向Boy&quot;);&#xD;&#xA;                    }&#xD;&#xA;                    else if(counter==1)&#xD;&#xA;                    {&#xD;&#xA;                        TriggernometryHelpers.PlayTTS(&quot;右刀去4点朝向Dog&quot;);&#xD;&#xA;                    }&#xD;&#xA;                    else if(counter==2)&#xD;&#xA;                    {&#xD;&#xA;                        TriggernometryHelpers.PlayTTS(&quot;右刀去1点朝向A&quot;);&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;                &#xD;&#xA;            }&#xD;&#xA;            counter++;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;}else{&#xD;&#xA;    TriggernometryHelpers.PlayTTS(&quot;空&quot;);&#xD;&#xA;}&#xD;&#xA;" ActionType="ExecuteScript">
                <Condition Enabled="false" Grouping="And">
                  <ConditionSingle Enabled="true" ExpressionL="${lvar:P3MarkList.size}" ExpressionTypeL="Numeric" ExpressionR="3" ExpressionTypeR="Numeric" ConditionType="NumericGreaterEqual" />
                </Condition>
              </Action>
            </Actions>
            <Condition Enabled="false" Grouping="Or" />
          </Trigger>
        </Triggers>
      </Folder>
    </Folders>
    <Triggers />
  </ExportedFolder>
</TriggernometryExport>